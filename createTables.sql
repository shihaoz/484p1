
CREATE TABLE USER_INFO
(
	USER_ID NUMBER(38) NOT NULL PRIMARY KEY,
	FIRST_NAME VARCHAR2(100) NOT NULL,
	LAST_NAME VARCHAR2(100) NOT NULL,
	YEAR_OF_BIRTH NUMBER(38),
	MONTH_OF_BIRTH NUMBER(38),
	DAY_OF_BIRTH NUMBER(38),
	GENDER VARCHAR2(100),
	CURRENT_CITY VARCHAR2(100),
	CURRENT_STATE VARCHAR2(100),
	CURRENT_COUNTRY VARCHAR2(100),
	HOMETOWN_CITY VARCHAR2(100),
	HOMETOWN_STATE VARCHAR2(100),
	HOMETOWN_COUNTRY VARCHAR2(100)
);

CREATE TABLE EDUCATION
(
	EID NUMBER(38) NOT NULL PRIMARY KEY,
	USER_ID NUMBER(38) NOT NULL, 
	INSTITUTION_NAME VARCHAR2(100),
	PROGRAM_YEAR NUMBER(38),
	PROGRAM_CONCENTRATION CHAR(100),
	PROGRAM_DEGREE VARCHAR2(100),
	FOREIGN KEY(USER_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE
);


CREATE SEQUENCE seq_eid START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER tri_eid 
BEFORE INSERT ON EDUCATION 
FOR EACH ROW
BEGIN
	select seq_eid.nextval into :new.eid from dual;
END;
/

CREATE TABLE FRIEND
(
	USER1_ID NUMBER(38) NOT NULL,
	USER2_ID NUMBER(38) NOT NULL,
	CHECK (USER1_ID != USER2_ID),
	FOREIGN KEY (USER1_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (USER2_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE,
	CONSTRAINT FRIENDSHIP PRIMARY KEY (USER1_ID, USER2_ID)
);

CREATE OR REPLACE TRIGGER TRI_FRIEND
BEFORE INSERT ON FRIEND
FOR EACH ROW
DECLARE 
	CNT NUMBER;
BEGIN
	SELECT COUNT(*) INTO CNT FROM FRIEND WHERE 
	(USER1_ID = :new.USER1_ID AND USER2_ID = :new.USER2_ID) OR 
	(USER1_ID = :new.USER2_ID AND USER2_ID = :new.USER1_ID);
	IF (CNT > 0) THEN
		DELETE FROM FRIEND WHERE (USER1_ID = :new.USER1_ID AND USER2_ID = :new.USER2_ID) 
		OR (USER1_ID = :new.USER2_ID AND USER2_ID = :new.USER1_ID);
	END IF;
END;
/
	


CREATE TABLE PHOTO
(
	PHOTO_ID NUMBER(38) NOT NULL PRIMARY KEY,
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATED_TIME TIMESTAMP(6),
	PHOTO_MODIFIED_TIME TIMESTAMP(6),
	PHOTO_LINK VARCHAR2(2000)
);

CREATE TABLE ALBUM
(
	ALBUM_ID NUMBER(38) NOT NULL PRIMARY KEY,
	OWNER_ID NUMBER(38) NOT NULL,
	COVER_PHOTO_ID NUMBER(38) NOT NULL,
	ALBUM_NAME VARCHAR2(100),
	AlBUM_CREATED_TIME TIMESTAMP(6),
	ALBUM_MODIFIED_TIME TIMESTAMP(6),
	ALBUM_LINK VARCHAR2(2000),
	ALBUM_VISIBILITY VARCHAR2(100),
	FOREIGN KEY (OWNER_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTO(PHOTO_ID) ON DELETE CASCADE
);

CREATE TABLE CONTAIN
(
	ALBUM_ID NUMBER(38) NOT NULL,
	PHOTO_ID NUMBER(38) NOT NULL PRIMARY KEY,
	FOREIGN KEY (ALBUM_ID) REFERENCES ALBUM(ALBUM_ID) ON DELETE CASCADE,
	FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO(PHOTO_ID) ON DELETE CASCADE
);

CREATE TABLE TAG
(
	PHOTO_ID NUMBER(38) NOT NULL,
	TAG_SUBJECT_ID NUMBER(38) NOT NULL,
	TAG_CREATED_TIME TIMESTAMP(6),
	TAG_X_COORDINATE NUMBER,
	TAG_Y_COORDINATE NUMBER,
	CONSTRAINT TAG_INFO PRIMARY KEY (PHOTO_ID, TAG_SUBJECT_ID),
	FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO(PHOTO_ID) ON DELETE CASCADE,
	FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE
);

CREATE TABLE EVENT
(
	EVENT_ID NUMBER(38) NOT NULL PRIMARY KEY,
	EVENT_CREATOR_ID NUMBER(38) NOT NULL,
	EVENT_NAME VARCHAR2(100),
	EVENT_TAGLINE VARCHAR2(1000),
	EVENT_DESCRIPTION VARCHAR2(4000),
	EVENT_HOST VARCHAR2(100),
	EVENT_TYPE VARCHAR2(100),
	EVENT_SUBTYPE VARCHAR2(100),
	EVENT_LOCATION VARCHAR2(200),
	EVENT_CITY VARCHAR2(100),
	EVENT_STATE	VARCHAR2(100),
	EVENT_COUNTRY VARCHAR2(100),
	EVENT_START_TIME TIMESTAMP(6),
	EVENT_END_TIME TIMESTAMP(6),
	FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE
);

CREATE TABLE MESSAGE
(
	SENDER_ID NUMBER(38) NOT NULL,
	RECEIVER_ID NUMBER(38) NOT NULL,
	MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
	SENT_TIME TIMESTAMP(6) NOT NULL,
	CONSTRAINT MESSAGE_INFO PRIMARY KEY (SENDER_ID, RECEIVER_ID, SENT_TIME),
	FOREIGN KEY (SENDER_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (RECEIVER_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE
);

CREATE TABLE PARTICIPANT(
	PARTICIPANT_ID NUMBER(38) NOT NULL PRIMARY KEY,
	EVENT_ID NUMBER(38) NOT NULL,
	PARTICIPANT_STATUS VARCHAR2(100) NOT NULL,
	FOREIGN KEY (PARTICIPANT_ID) REFERENCES USER_INFO(USER_ID) ON DELETE CASCADE,
	FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID) ON DELETE CASCADE
);

